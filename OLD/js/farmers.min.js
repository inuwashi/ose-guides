(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

window.addEventListener("render-accordions", function () {
  processAccordions();
});
window.addEventListener("load", function () {
  processAccordions();
});

function processAccordions() {
  window.addEventListener("resize", function () {
    panelWidthFix();
  });
  setBoxAccordionTopHeight();
  youTubeKeyboardAccessibility();
  document.querySelectorAll(".Accordion").forEach(function (accordion) {
    // Allow for multiple accordion sections to be expanded at the same time
    var allowMultiple = false; // we don't want multiple accordion sections to be expanded at the same time
    // Allow for each toggle to both open and close individually

    var allowToggle = accordion.hasAttribute("data-allow-toggle"); // Create the array of toggle elements for the accordion group

    var triggers = _toConsumableArray(accordion.querySelectorAll(".Accordion-trigger"));

    var panels = _toConsumableArray(accordion.querySelectorAll(".Accordion-panel"));

    triggers.map(function (target) {
      panelWidthFix(accordion, target);
    });
    accordion.addEventListener("click", function (event) {
      var target = event.target;
      target.parentElement.parentElement.classList.contains("Accordion-trigger") ? target = target.parentElement.parentElement : target.parentElement.classList.contains("Accordion-trigger") ? target = target.parentElement : ""; // Kind of a hack to set target element correctly

      if (target.classList.contains("Accordion-trigger")) {
        // Check if the current toggle is expanded.
        var isExpanded = target.getAttribute("aria-expanded") == "true";
        var active = accordion.querySelector('[aria-expanded="true"]'); // without allowMultiple, close the open accordion

        if (!allowMultiple && active && active !== target) {
          // Set the expanded state on the triggering element
          active.setAttribute("aria-expanded", "false"); // Hide the accordion sections, using aria-controls to specify the desired section

          document.getElementById(active.getAttribute("aria-controls")).setAttribute("hidden", ""); // When toggling is not allowed, clean up disabled state

          if (!allowToggle) {
            active.removeAttribute("aria-disabled");
          }
        }

        if (!isExpanded) {
          document.querySelectorAll(".box-accordion-top").forEach(function (boxAccordionTop) {
            return boxAccordionTop.setAttribute("aria-expanded", false);
          });
          document.querySelectorAll(".Accordion-panel").forEach(function (accordionPanel) {
            accordionPanel.setAttribute("aria-hidden", false);
            accordionPanel.setAttribute("hidden", false);
          }); // Set the expanded state on the triggering element

          target.setAttribute("aria-expanded", "true"); // Hide the accordion sections, using aria-controls to specify the desired section

          document.getElementById(target.getAttribute("aria-controls")).removeAttribute("hidden"); // If toggling is not allowed, set disabled state on trigger

          if (!allowToggle) target.setAttribute("aria-disabled", "true");
        } else if (allowToggle && !!isExpanded) {
          // Set the expanded state on the triggering element
          target.setAttribute("aria-expanded", "false"); // Hide the accordion sections, using aria-controls to specify the desired section

          var ariaControlsTarget = document.getElementById(target.getAttribute("aria-controls"));
          ariaControlsTarget.setAttribute("aria-hidden", true);
          ariaControlsTarget.setAttribute("hidden", true);
        }

        event.preventDefault();
      }

      var activePanel = panels.filter(function (el) {
        return !el.hasAttribute("hidden");
      })[0];
      activePanel ? activePanel.scrollIntoView({
        behavior: "smooth"
      }) : "";
    }); // Bind keyboard behaviors on the main accordion container

    accordion.addEventListener("keydown", function (event) {
      var target = event.target;
      var key = event.which.toString(); // var isExpanded = target.getAttribute("aria-expanded") == "true";
      // var allowToggle = allowMultiple
      //   ? allowMultiple
      //   : accordion.hasAttribute("data-allow-toggle");
      // 33 = Page Up, 34 = Page Down

      var ctrlModifier = event.ctrlKey && key.match(/33|34/); // Is this coming from an accordion header?

      if (target.classList.contains("Accordion-trigger")) {
        // Up/ Down arrow and Control + Page Up/ Page Down keyboard operations
        // 38 = Up, 40 = Down
        if (key.match(/38|40/) || ctrlModifier) {
          var index = triggers.indexOf(target);
          var direction = key.match(/34|40/) ? 1 : -1;
          var length = triggers.length;
          var newIndex = (index + length + direction) % length;
          triggers[newIndex].focus();
          event.preventDefault();
        } else if (key.match(/35|36/)) {
          // 35 = End, 36 = Home keyboard operations
          switch (key) {
            // Go to first accordion
            case "36":
              triggers[0].focus();
              break;
            // Go to last accordion

            case "35":
              triggers[triggers.length - 1].focus();
              break;
          }

          event.preventDefault();
        }
      }
    }); // These are used to style the accordion when one of the buttons has focus

    accordion.querySelectorAll(".Accordion-trigger").forEach(function (trigger) {
      trigger.addEventListener("focus", function (event) {
        // accordion.classList.add('focus');
        event.target.classList.add("focus");
      });
      trigger.addEventListener("blur", function (event) {
        accordion.classList.remove("focus");
        event.target.classList.remove("focus");
      });
    }); // Minor setup: will set disabled state, via aria-disabled, to an
    // expanded/ active accordion which is not allowed to be toggled close

    if (!allowToggle) {
      // Get the first expanded/ active accordion
      var expanded = accordion.querySelector('[aria-expanded="true"]'); // If an expanded/ active accordion is found, disable

      if (expanded) {
        expanded.setAttribute("aria-disabled", "true");
      }
    }
  });
  window.addEventListener("resize", function () {
    _toConsumableArray(document.querySelectorAll(".Accordion")).map(function (accordion) {
      _toConsumableArray(accordion.querySelectorAll(".Accordion-trigger")).map(function (target) {
        panelWidthFix(accordion, target);
      });
    });

    setBoxAccordionTopHeight();
  });

  var accordion_card_array = _toConsumableArray(document.querySelectorAll(".Card-Accordion"));

  var accordion_card_content_links_array = _toConsumableArray(document.querySelectorAll(".card-accordion-content a"));

  accordion_card_content_links_array.map(function (link) {
    link.setAttribute("tabindex", "-1");
  });
  accordion_card_array.map(function (cardAccordion) {
    cardAccordion.querySelector(".card-accordion-toggle a").addEventListener("click", function (evt) {
      toggleCardAccordion(evt, cardAccordion);
    });
    cardAccordion.addEventListener("keydown", function (evt) {
      if (evt.target.classList.contains("container") && evt.target.classList.contains("Card-Accordion")) {
        cardAccordion.tabIndex = "-1";
      }
    });
    cardAccordion.querySelector(".card-accordion-toggle a").addEventListener("keydown", function (event) {
      if (event.code.toLowerCase() === "space" || event.key.toLowerCase() === "enter") {
        event.preventDefault();
        toggleCardAccordion(event, cardAccordion);
        var showContent = cardAccordion.querySelector(".card-accordion").classList.contains("show");
        var tabIndex = !!showContent ? "0" : "-1";
        cardAccordion.tabIndex = tabIndex;
        !!showContent ? cardAccordion.focus() : cardAccordion.blur();
      }
    }); // cardAccordion
    //   .querySelector(".card-accordion-toggle a")
    //   .addEventListener("keydown", (event) => {
    //     if (
    //       event.code.toLowerCase() === "space" ||
    //       event.key.toLowerCase === "enter"
    //     ) {
    //       event.preventDefault();
    //       toggleCardAccordion(event, cardAccordion);
    //       const showContent = cardAccordion
    //         .querySelector(".card-accordion")
    //         .classList.contains("show");
    //       const tabIndex = !!showContent ? "0" : "-1";
    //       cardAccordion.tabIndex = tabIndex;
    //       !!showContent ? cardAccordion.focus() : cardAccordion.blur();
    //     }
    //   });
  });
  document.body.addEventListener("click", function (evt) {
    var tabbedAccordions = document.querySelectorAll(".Card-Accordion[tabindex='0']");

    if (!!tabbedAccordions) {
      tabbedAccordions.forEach(function (accordion) {
        accordion.removeAttribute("tabindex");
      });
    }
  });
}

function toggleCardAccordion(evt, cardAccordion) {
  evt.preventDefault();
  cardAccordion.tabIndex = "-1";
  cardAccordion.blur();
  var target = evt.target;
  target.parentElement.parentElement.parentElement.classList.contains("Card-Accordion") ? target = target.parentElement.parentElement.parentElement : target.parentElement.parentElement.classList.contains("Card-Accordion") ? target = target.parentElement.parentElement : target.parentElement.classList.contains("Card-Accordion") ? target = target.parentElement : "";

  if (target.querySelector(".card-accordion-content")) {
    var content_links = cardAccordion.querySelectorAll(".card-accordion-content a");
    target.querySelector(".Card-Accordion .card-accordion").classList.toggle("show");
    target.querySelector(".card-accordion-toggle > a").classList.toggle("card-accordion-show-less");

    if (target.querySelector(".Card-Accordion .card-accordion").classList.contains("show")) {
      var focusedElement = document.querySelector(".Card-Accordion :focus");
      if (focusedElement) focusedElement.blur();

      for (var i = 0; i < content_links.length; i++) {
        content_links[i].setAttribute("tabindex", "0");
      }

      target.scrollIntoView({
        behavior: "smooth"
      });
      target.querySelector(".card-accordion-toggle > a").innerHTML = "Show Less";
    } else {
      for (var _i = 0; _i < content_links.length; _i++) {
        content_links[_i].setAttribute("tabindex", "-1");
      }

      var toggleLink = target.querySelector(".card-accordion-toggle a");
      if (!!toggleLink) toggleLink.innerHTML = "Show More";
      target.scrollIntoView({
        behavior: "smooth"
      });
    }

    youTubeKeyboardAccessibility();
  }
}

function panelWidthFix(accordionBlock, accordionTarget) {
  if (!!accordionTarget) {
    var targetPanel = accordionBlock.querySelector("#".concat(accordionTarget.getAttribute("aria-controls")));
    var offset = (accordionTarget.offsetLeft - accordionBlock.offsetLeft) * -1 + 10 + "px";
    targetPanel.style.marginLeft = offset;
    targetPanel.style.width = "".concat(accordionBlock.offsetWidth - 20, "px");
  }
}

function setBoxAccordionTopHeight() {
  document.querySelectorAll(".box-accordion-top").forEach(function (boxAccordion) {
    setTimeout(setHeight, 100);

    function setHeight() {
      var height = boxAccordion.getBoundingClientRect().height;
      boxAccordion.style.height = window.innerWidth >= 760 ? height + "px" : null;
    }
  });
}

function youTubeKeyboardAccessibility(open) {
  var accordions = document.querySelectorAll(".card-accordion");

  if (!!accordions) {
    accordions.forEach(function (accordion) {
      var youTubeIframe = accordion.querySelector("iframe[data-src*='youtube.com']");

      if (!!youTubeIframe) {
        var tabIndexValue = accordion.classList.contains("show") ? "0" : "-1";
        youTubeIframe.tabIndex = tabIndexValue;
      }
    });
  }
}

},{}],2:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.removeActiveFromUnchecked = removeActiveFromUnchecked;

function removeActiveFromUnchecked(cardClass) {
  var cardInputs = document.querySelectorAll(".".concat(cardClass, " input"));
  cardInputs.forEach(function (input) {
    var card = input.closest(".".concat(cardClass));
    if (!!card && !input.checked) card.classList.remove("checked");
  });
}

},{}],3:[function(require,module,exports){
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

var checkboxes_and_radios = _interopRequireWildcard(require("./checkboxes_and_radios"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

window.addEventListener("load", function (event) {
  checkboxes_and_radios.checkboxCards();
  checkboxes_and_radios.radioButtonCards();
});

},{"./checkboxes_and_radios":4}],4:[function(require,module,exports){
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.checkboxCards = checkboxCards;
exports.radioButtonCards = radioButtonCards;

var form_utils = _interopRequireWildcard(require("./_form-utils"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function checkboxCards() {
  setCardEvents("checkbox-card");
}

function radioButtonCards() {
  setCardEvents("radio-button-card");
}

function setCardEvents(cardClass) {
  var cardInputs = document.querySelectorAll(".".concat(cardClass, " input"));

  if (!!cardInputs) {
    cardInputs.forEach(function (input) {
      var card = input.closest(".".concat(cardClass));
      input.addEventListener("click", function (_) {
        if (!!card) {
          if (!!input.checked) card.classList.add("checked");
          if (!input.checked) card.classList.remove("checked");
        }

        form_utils.removeActiveFromUnchecked(cardClass);
      });
    });
  }
}

},{"./_form-utils":2}],5:[function(require,module,exports){
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ariaCheck = ariaCheck;
exports.handleKeyboard = handleKeyboard;
exports.keyboardEventListeners = keyboardEventListeners;

var mm_utils = _interopRequireWildcard(require("../farmers_mm_utils.js"));

var mm_accessibility_keyboard = _interopRequireWildcard(require("./farmers_mm_accessibility_keyboard.js"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function handleKeyboard(event) {
  if (event.keyCode == 27) mm_accessibility_keyboard.escapeKey(event);
  if (event.keyCode == 36 || event.keyCode == 35) mm_accessibility_keyboard.homeEnd(event);
  if (event.keyCode == 39) mm_accessibility_keyboard.topLevelArrows("right");
  if (event.keyCode == 37) mm_accessibility_keyboard.topLevelArrows("left");
  if (event.keyCode == 38) mm_accessibility_keyboard.secondLevelArrows(event, "up");
  if (event.keyCode == 40) mm_accessibility_keyboard.secondLevelArrows(event, "down");
  document.querySelectorAll(".tb-megamenu .level-2").forEach(function (link) {
    link.addEventListener("keyup", function (event) {
      event.stopImmediatePropagation();
      event.preventDefault();

      if (event.keyCode === 13) {
        if (event.target.classList.contains("page-link")) return;
        mm_utils.processLinkStyles(link, ".tb-megamenu-item.level-2.dropdown-submenu.open");
        ariaCheck();
      }
    });
  });
}

function keyboardEventListeners() {
  document.body.addEventListener("keyup", function (event) {
    if (event.key.toLowerCase() === "tab" && !document.querySelector(".primary-nav-wrap :focus")) mm_utils.closeAllMenus(event);
  });
}

function ariaCheck() {
  document.querySelectorAll("li.tb-megamenu-item").forEach(function (element) {
    var link = element.querySelector("a.dropdown-toggle");

    if (link) {
      var ariaExpanded = false;
      if (element.classList.contains("open")) ariaExpanded = true;
      link.setAttribute("aria-expanded", ariaExpanded);
    }
  });
}

},{"../farmers_mm_utils.js":9,"./farmers_mm_accessibility_keyboard.js":6}],6:[function(require,module,exports){
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.escapeKey = escapeKey;
exports.homeEnd = homeEnd;
exports.secondLevelArrows = secondLevelArrows;
exports.topLevelArrows = topLevelArrows;

var mm_utils = _interopRequireWildcard(require("../farmers_mm_utils"));

var general_utils = _interopRequireWildcard(require("../../../../_utils/general_utils"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

// this file to be used for specific key events
// anything else for accessiblity should go in farmers_mm_accessibility.js
var plainLinkHoverClass = "sidemenu-hover-plain";
var topLevelLinks = document.querySelectorAll(".tb-megamenu-item.level-1 > a");
var firstLevel = document.querySelectorAll(".tb-megamenu .tb-megamenu-item.level-1");
var firstLevelArray = general_utils.convertNodeListToArray(firstLevel);

function escapeKey(event) {
  mm_utils.closeAllMenus(event);
}

function homeEnd(event) {
  event.preventDefault();
  var firstLevelSelector = event.keyCode === 36 ? ".tb-megamenu-item.level-1" : ".tb-megamenu-item.level-1:last-child";
  var level2Selector = event.keyCode === 36 ? ".tb-megamenu-nav .tb-megamenu-item.level-1.open .level-2:first-of-type" : ".tb-megamenu-nav .tb-megamenu-item.level-1.open .level-2:last-child";
  var openLevel2Item = document.querySelector(".tb-megamenu .tb-megamenu-item.level-2.open");

  if (document.querySelector(".tb-megamenu ".concat(firstLevelSelector)) && !openLevel2Item) {
    mm_utils.removeHoverFromLevel2Links(true);
    var linkIndex = event.keyCode === 36 ? 0 : topLevelLinks.length - 1;
    topLevelLinks[linkIndex].focus();
  }

  if (openLevel2Item) {
    mm_utils.removeHoverFromLevel2Links();
    var link = document.querySelector("".concat(level2Selector, " a"));

    if (link) {
      if (!link.classList.contains("sidemenu-hover")) link.classList.add(plainLinkHoverClass);
      link.focus();
    }
  }
}

function topLevelArrows(direction) {
  var focusedLink = document.querySelector(".tb-megamenu .level-1 a:focus");

  if (!!focusedLink) {
    var linkTitle = focusedLink.querySelector(".mm-top-level-title");

    if (!!linkTitle) {
      var index = firstLevelArray.indexOf(document.querySelector("li[data-label=\"".concat(linkTitle.textContent, "\"]")));
      var newIndex = direction === "right" ? index + 1 : index - 1;

      if (firstLevelArray[newIndex]) {
        document.querySelector(".tb-megamenu .level-1 a:focus").blur();
        firstLevelArray[newIndex].querySelector("a").focus();
      }
    }
  }
}

function secondLevelArrows(event, direction) {
  event.preventDefault();
  var linkArray = general_utils.convertNodeListToArray(document.querySelectorAll(".tb-megamenu .level-1.open li.level-2"));
  var focusedLink = document.querySelector(".tb-megamenu .level-1.open li.level-2 a:focus");
  var currentLink = focusedLink ? focusedLink : document.querySelector(".tb-megamenu .level-1.open li.level-2 a.sidemenu-hover");
  var secondLevelElement = currentLink ? document.querySelector(".tb-megamenu .level-1.open li.level-2[data-label=\"".concat(currentLink.getAttribute("data-category"), "\"]")) : null;

  if (secondLevelElement) {
    var index = linkArray.indexOf(secondLevelElement);
    var newIndex = direction === "down" ? index + 1 : index - 1;

    if (linkArray[newIndex]) {
      var oldLink = linkArray[index].querySelector("a");
      var newLink = linkArray[newIndex].querySelector("a");
      oldLink.classList.remove(plainLinkHoverClass);
      newLink.classList.add(plainLinkHoverClass);
      oldLink.blur();
      newLink.focus();
    }
  }
}

},{"../../../../_utils/general_utils":14,"../farmers_mm_utils":9}],7:[function(require,module,exports){
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createGridLinksContainer = createGridLinksContainer;
exports.setupFeaturedLinksContainer = setupFeaturedLinksContainer;
exports.setupFirstLevelTab = setupFirstLevelTab;
exports.setupLandingPageLink = setupLandingPageLink;
exports.setupLandingPageLinkNoSubmenu = setupLandingPageLinkNoSubmenu;
exports.setupMobileGridLinks = setupMobileGridLinks;

var general_utils = _interopRequireWildcard(require("../../../_utils/general_utils"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function setupFirstLevelTab(firstLevel, categoryName, linksContainer) {
  var sectionHeader = firstLevel.querySelector("a:first-of-type");
  var categoryHeader = document.createElement("div");
  categoryHeader.id = "mm-mobile-menu-".concat(general_utils.webFriendlyName(categoryName));
  categoryHeader.classList.add("mm-mobile-nav-category"); // append main category header

  categoryHeader.textContent = categoryName;
  // linksContainer.appendChild(categoryHeader);
}

function setupMobileGridLinks(firstLevel, submenus, linksContainer) {
  submenus.forEach(function (submenu) {
    submenu = submenu.cloneNode(true);
    var categoryHeader = "";

    if (submenu.classList.contains("level-2")) {
      var pageLink = submenu.querySelector("a.page-link");
      categoryHeader = document.createElement("div");
      categoryHeader.classList.add("mm-link-category");

      if (pageLink) {
        var categoryPageLink = document.createElement("a");
        categoryPageLink.href = pageLink.href;
        categoryPageLink.text = pageLink.text;
        categoryPageLink.classList.add("direct-link");
        categoryHeader.classList.add("direct-link-item");
        categoryHeader.appendChild(categoryPageLink);
      }

      if (!pageLink) categoryHeader.innerHTML = submenu.getAttribute("data-label");
    }

    var links = submenu.querySelectorAll(".subcategory.row a");
    var linkList = createGridLinksContainer(links);
    if (categoryHeader) linksContainer.appendChild(categoryHeader);
    linksContainer.appendChild(linkList);
  });
}

function createGridLinksContainer(links) {
  var linkList = document.createElement("ul");
  linkList.classList.add("mm-category-links");
  links.forEach(function (link) {
    var newLink = document.createElement("a");
    newLink.href = link.href;
    newLink.text = general_utils.decodeHTMLEntities(link.querySelector("span:first-of-type").innerHTML);
    var listItem = document.createElement("li");
    listItem.appendChild(newLink);
    linkList.appendChild(listItem);
  });
  return linkList;
}

function setupFeaturedLinksContainer(firstLevel, linksContainer) {
  var featuredLinks = firstLevel.querySelectorAll(".mm-grid-featured a");

  if (featuredLinks.length) {
    var featuredLinksHeader = document.createElement("div");
    var featuredLinksList = document.createElement("ul");
    featuredLinksHeader.classList.add("mm-link-category", "mm-mobile-featured-container");
    featuredLinksHeader.innerHTML = "Featured";
    featuredLinksList.classList.add("mm-featured-links");
    var uniqueLinks = general_utils.removeDupsInAssociativeArrayByKey(featuredLinks, "href");
    general_utils.sortArrayAlphabeticalByKey(uniqueLinks);
    uniqueLinks.forEach(function (featuredLink) {
      featuredLink = featuredLink.cloneNode(true);
      var newLink = document.createElement("li");
      newLink.appendChild(featuredLink);
      featuredLinksList.appendChild(newLink);
    });

    if (featuredLinksList) {
      linksContainer.appendChild(featuredLinksHeader);
      linksContainer.appendChild(featuredLinksList);
    }
  }
}

function setupLandingPageLink(firstLevel, linksContainer) {
  var landingPageLink = firstLevel.querySelector(".mm-landing-page-banner-link") ? firstLevel.querySelector(".mm-landing-page-banner-link").cloneNode(true) : "";
  if (landingPageLink) linksContainer.appendChild(landingPageLink);
}

function setupLandingPageLinkNoSubmenu(firstLevel, categoryName) {
  var mobileCategoryElement = document.querySelector(".mm-links-container #mm-mobile-menu-".concat(general_utils.webFriendlyName(categoryName)));
  var pageLinkContainer = document.createElement("div");
  var pageLink = document.createElement("a");
  pageLinkContainer.classList.add("mm-landing-page-link");
  pageLink.text = "View ".concat(categoryName, " Page");
  pageLink.href = firstLevel.querySelector("a").getAttribute("href");
  pageLink.classList.add("btn", "tertiary"); //add link to container

  pageLinkContainer.appendChild(pageLink);
  if (mobileCategoryElement) mobileCategoryElement.parentNode.insertBefore(pageLinkContainer, mobileCategoryElement.nextSibling);
}

},{"../../../_utils/general_utils":14}],8:[function(require,module,exports){
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.backToTopShowHide = backToTopShowHide;
exports.processMobileSections = processMobileSections;
exports.showBackToTop = showBackToTop;
exports.toggleMobileMegaMenu = toggleMobileMegaMenu;

var general_utils = _interopRequireWildcard(require("../../../_utils/general_utils"));

var mm_mobile_helpers = _interopRequireWildcard(require("./farmers_mm_mobile_helpers"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function processMobileSections() {
  window.addEventListener("DOMContentLoaded", function () {
    var firstLevelMenus = document.querySelectorAll(".tb-megamenu-item.level-1");
    var linksContainer = document.querySelector(".mm-links-container");
    firstLevelMenus.forEach(function (firstLevel) {
      var categoryName = firstLevel.querySelector(".mm-nav-link div").firstChild.nodeValue.trim();
      if (categoryName.toLowerCase() === "home") return;
      mm_mobile_helpers.setupFirstLevelTab(firstLevel, categoryName, linksContainer);
      var sideMenu = firstLevel.querySelectorAll(".tb-megamenu-item.level-2");
      var submenus = sideMenu.length ? sideMenu : firstLevel.querySelectorAll(".mm-card-grid .subcategory.row"); // setup mobile link depending on what type of section it is (categories vs. none)

      if (submenus.length) {
        mm_mobile_helpers.setupMobileGridLinks(firstLevel, submenus, linksContainer);
        mm_mobile_helpers.setupFeaturedLinksContainer(firstLevel, linksContainer);
        mm_mobile_helpers.setupLandingPageLink(firstLevel, linksContainer);
      }

      if (!submenus.length) mm_mobile_helpers.setupLandingPageLinkNoSubmenu(firstLevel, categoryName);
    });
  });
}

function backToTopShowHide() {
  window.addEventListener("load", function () {
    var backToTop = document.querySelector(".back-to-top.mm-back-to-top");
    var navContainer = document.querySelector("#mm-mobile .nav-container");

    if (navContainer) {
      navContainer.addEventListener("scroll", function (element) {
        var position = document.querySelector("#mm-mobile .mm-links-container .mm-mobile-nav-category").getBoundingClientRect().y;
        var closeButtonHeight = document.querySelector(".mm-mobile-menu-close").getBoundingClientRect().height;
        var calcluatedPosition = position - closeButtonHeight;
        if (calcluatedPosition <= 0) showBackToTop(true);
        if (calcluatedPosition > 0) showBackToTop(false);
      });
    }
  });
}

function showBackToTop(show) {
  var backToTop = document.querySelector(".back-to-top.mm-back-to-top");
  var displayStyle = show ? "block" : "none";
  backToTop.style.display = displayStyle;
}

function toggleMobileMegaMenu(action) {
  var openClass = "animation-slide-in";
  var closeClass = "animation-slide-out";

  if (action === "open") {
    document.querySelector(".nav-container").classList.remove(closeClass);
    document.querySelector(".nav-container").classList.add(openClass);
  }

  if (action === "close") {
    document.querySelector(".nav-container").classList.remove(openClass);
    document.querySelector(".nav-container").classList.add(closeClass);
    document.querySelector(".back-to-top.mm-back-to-top").style.display = "none";
  }
}

},{"../../../_utils/general_utils":14,"./farmers_mm_mobile_helpers":7}],9:[function(require,module,exports){
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.closeAllMenus = closeAllMenus;
exports.closeOnOutsideClick = closeOnOutsideClick;
exports.isSafari = isSafari;
exports.processLinkStyles = processLinkStyles;
exports.processSubmenuBanner = processSubmenuBanner;
exports.removeHoverFromLevel2Links = removeHoverFromLevel2Links;
exports.scrollEvents = scrollEvents;
exports.setPanelMinHeight = setPanelMinHeight;
exports.setSubMenuDimensions = setSubMenuDimensions;
exports.setupFirstLevelLinks = setupFirstLevelLinks;
exports.setupSecondLevelLinks = setupSecondLevelLinks;
exports.setupSideMenuLinks = setupSideMenuLinks;
exports.simpleClickEvents = simpleClickEvents;
exports.toggleContentOverlay = toggleContentOverlay;
exports.toggleMenuLink = toggleMenuLink;

var mm_accessibility = _interopRequireWildcard(require("./accessibility/farmers_mm_accessibility"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function closeOnOutsideClick() {
  document.addEventListener("click", function (event) {
    var isClickInside = document.querySelector(".tb-megamenu").contains(event.target) ? true : false;

    if (!isClickInside) {
      closeAllMenus();
      mm_accessibility.ariaCheck();
    }
  });
}

function simpleClickEvents() {
  var sectionLinks = document.querySelectorAll(".tb-megamenu .mm-card-grid a");
  sectionLinks.forEach(function (link) {
    if (link.href.indexOf("#") >= 0) {
      link.addEventListener("click", function (event) {
        if (window.location.pathname === event.currentTarget.pathname) {
          toggleContentOverlay(document.querySelector(".tb-megamenu .level-1"));
          closeAllMenus();
        }
      });
    }
  });
}

function scrollEvents() {
  document.addEventListener("scroll", function (event) {
    var openMenu = document.querySelector(".level-1.open");

    if (openMenu) {
      var openSubMenu = openMenu.querySelector(".mm-card-grid");
      var openMenuCoords = openSubMenu ? openSubMenu.getBoundingClientRect() : null;

      if (!!openMenuCoords && openMenuCoords.y * -1 - openMenuCoords.height >= 300) {
        toggleContentOverlay(openMenu.querySelector("a.dropdown-toggle"));
        openMenu.classList.remove("open");
        mm_accessibility.ariaCheck();
      }
    }
  });
}

function setupFirstLevelLinks() {
  var firstLevelSelector = ".tb-megamenu-item.level-1";
  var firstLevelOpenSelector = "".concat(firstLevelSelector, ".open");
  var firstLevel = document.querySelectorAll(firstLevelSelector);

  var languages = require("../../../constants").languages;

  var langHomePages = languages.map(function (row) {
    return row.lang === "en" ? "/" : "/".concat(row.lang);
  });
  firstLevel.forEach(function (item) {
    setPanelMinHeight(item);
    processSubmenuBanner(item);
    var link = item.querySelector("a");
    var activeLinkClass = "mm-active";
    if (langHomePages.includes(link.getAttribute("data-label")) && langHomePages.includes(window.location.pathname)) link.classList.add(activeLinkClass);

    if (!langHomePages.includes(link.getAttribute("data-label"))) {
      var dataLabelLength = link.getAttribute("data-label").length;
      var anchorLink = window.location.pathname.substring(0, dataLabelLength);
      if (anchorLink === link.getAttribute("data-label")) link.classList.add(activeLinkClass);

      if (!link.classList.contains("page-link")) {
        if (!item.querySelector(".sidemenu")) item.classList.add("no-sidemenu");
        link.addEventListener("click", function (event) {
          if (item.classList.contains("open")) {
            item.classList.remove("open");
            mm_accessibility.ariaCheck();
          } else if (!item.classList.contains("open")) {
            processLinkStyles(item, firstLevelOpenSelector);
            processLinkStyles(item, "".concat(firstLevelOpenSelector, " .level-2"));
            var firstSidemenuLink = item.querySelector(".sidemenu li:first-child");

            if (item.classList.contains("open") && firstSidemenuLink) {
              firstSidemenuLink.classList.add("open");
              firstSidemenuLink.querySelector("a").classList.add("sidemenu-hover");
              setSubMenuDimensions();
            }

            if (item.classList.contains("no-sidemenu")) setSubMenuDimensions();
            mm_accessibility.ariaCheck();
            item.querySelector("a").focus();
          }

          toggleContentOverlay(item);
        });
      }
    }
  });
}

function setupSecondLevelLinks() {
  var _this = this;

  var secondLevelSelector = ".tb-megamenu-item.level-2.dropdown-submenu";
  var secondLevelOpenSelector = "".concat(secondLevelSelector, ".open");
  var secondLevelLinks = document.querySelectorAll(secondLevelSelector);
  secondLevelLinks.forEach(function (item) {
    item.querySelector(".dropdown-toggle").addEventListener("click", function (event) {
      event.preventDefault();
      event.stopPropagation();
      var link = item.querySelector("a");

      if (link.classList.contains("page-link")) {
        event.stopImmediatePropagation();
        window.location = _this.querySelector("a").href;
      }

      processLinkStyles(item, secondLevelOpenSelector);
      link.classList.add("sidemenu-hover");
      mm_accessibility.ariaCheck();
    });
  });
}

function setupSideMenuLinks() {
  var sideMenus = document.querySelectorAll(".tb-megamenu .level-2 a.dropdown-toggle");
  sideMenus.forEach(function (sidemenu) {
    sidemenu.addEventListener("mouseover", function (event) {
      removeHoverFromLevel2Links();
    });
  });
  mm_accessibility.ariaCheck();
}

function toggleContentOverlay(element) {
  var overlay = document.querySelector(".usa-overlay");
  var docHeight = document.querySelector("html").getBoundingClientRect().height - document.querySelector("header").getBoundingClientRect().height;
  document.querySelector(".usa-overlay").style.height = "".concat(docHeight, "px");
  overlay.style.display = element.classList.contains("open") ? "block" : "none";
  mm_accessibility.ariaCheck();
  blurNonOpenFirstLevelLink();
}

function processSubmenuBanner(item) {
  var linkText = item.querySelector("a").text.trim();
  var landingPageBanner = document.querySelector(".mm-landing-page-banner[data-label='".concat(linkText, "']")) ? document.querySelector(".mm-landing-page-banner[data-label='".concat(linkText, "']")).cloneNode(true) : "";

  if (landingPageBanner) {
    var submenuLevel1 = item.querySelector(".tb-megamenu-submenu");

    if (submenuLevel1) {
      submenuLevel1.prepend(landingPageBanner);
      landingPageBanner.classList.add("show-mm-landing-page-banner");
    }
  }
}

function removeHoverFromLevel2Links(all) {
  var sideMenuLinks = document.querySelectorAll(".tb-megamenu-item.level-1 .sidemenu li");
  sideMenuLinks.forEach(function (element) {
    var link = element.querySelector("a.dropdown-toggle");

    if (link) {
      link.classList.remove("sidemenu-hover-plain");
      link.blur();
    }

    if (all && link) {
      element.classList.remove("open");
      link.classList.remove("sidemenu-hover");
      link.setAttribute("aria-expanded", "false");
    }
  });
}

function setSubMenuDimensions() {
  var primaryNavCoords = document.querySelector(".primary-nav-wrap > .container").getBoundingClientRect();
  var level1Links = document.querySelectorAll("li.tb-megamenu-item.level-1");
  level1Links.forEach(function (element) {
    var submenu = element.querySelector(".tb-megamenu-submenu");

    if (submenu) {
      submenu.style.left = "initial";
      var subMenuCoords = element.getBoundingClientRect();
      var offset = subMenuCoords.x - primaryNavCoords.x + 20;
      submenu.style.left = "-".concat(offset, "px");
    }
  });
}

function setPanelMinHeight(item, submenu) {
  var targetNode = item;
  var config = {
    attributes: true,
    childList: true
  };

  var callback = function callback(mutationsList, observer) {
    if (item.classList.contains("open")) {
      var sideMenuHeight = item.querySelector(".tb-megamenu-submenu.dropdown-menu.nav-child").getBoundingClientRect().height - 50;
      var rows = item.querySelectorAll(".tb-megamenu-item.level-2 .mega-dropdown-inner .tb-megamenu-column.mega-col-nav.row");
      rows.forEach(function (row) {
        row.style.minHeight = "".concat(sideMenuHeight, "px");
      });
      item.querySelector(".tb-megamenu-submenu.dropdown-menu.nav-child").style.visibility = "visible";
    }
  };

  var observer = new MutationObserver(callback);
  observer.observe(targetNode, config);
}

function isSafari() {
  var safari = false;

  if (navigator.userAgent.indexOf("Safari") != -1 && navigator.userAgent.indexOf("Chrome") == -1) {
    safari = true;
  }

  return safari;
}

function processLinkStyles(link, selector) {
  if (selector.indexOf("level-2") !== -1) {
    var sideMenuElements = document.querySelectorAll(".tb-megamenu .level-1.open li.level-2");
    sideMenuElements.forEach(function (element) {
      element.querySelector("a").classList.remove("sidemenu-hover");
      element.querySelector("a").classList.remove("sidemenu-hover-plain");
    });
    if (!link.classList.contains("open")) toggleMenuLink(link, true);
  } else {
    link.classList.contains("open") ? toggleMenuLink(link, false) : toggleMenuLink(link, true);
  }

  var activeLinks = document.querySelectorAll(selector);
  activeLinks.forEach(function (activeLink) {
    if (activeLink !== link) toggleMenuLink(activeLink, false);
  });
}

function toggleMenuLink(element, add) {
  if (add) element.classList.add("open");
  if (!add) element.classList.remove("open");

  if (element.classList.contains("level-2")) {
    if (add) element.querySelector("a").classList.add("sidemenu-hover");
    if (!add) element.querySelector("a").classList.remove("sidemenu-hover");
  }

  mm_accessibility.ariaCheck();
}

function closeAllMenus(event) {
  var openLink = document.querySelector(".tb-megamenu .level-1.open a");
  document.querySelectorAll(".tb-megamenu .level-1.open").forEach(function (element) {
    processLinkStyles(element, ".tb-megamenu-item.level-1.open");
  });
  document.querySelectorAll(".tb-megamenu .level-2.open").forEach(function (element) {
    element.classList.remove("open");
  });
  toggleContentOverlay(document.querySelector(".tb-megamenu .level-1"));
  removeHoverFromLevel2Links(true);
  mm_accessibility.ariaCheck();
  if (!!event && !!event.code && event.code.toLowerCase() === "escape" && openLink) openLink.focus();
}

function blurNonOpenFirstLevelLink() {
  var focusedLink = document.querySelector(".tb-megamenu .tb-megamenu-item.level-1:not(.open) a:focus");
  if (!!focusedLink) focusedLink.blur();
}

},{"../../../constants":15,"./accessibility/farmers_mm_accessibility":5}],10:[function(require,module,exports){
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.megamenu_mobile = void 0;

var mm_mobile_utils = _interopRequireWildcard(require("./_utils/farmers_mm_mobile_utils"));

var general_utils = _interopRequireWildcard(require("../../_utils/general_utils"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var megamenu_mobile = function megamenu_mobile() {
  mm_mobile_utils.processMobileSections();
  mm_mobile_utils.backToTopShowHide();

  if (document.querySelector(".tb-megamenu")) {
    var megaMenuMobile = document.querySelector(".mm-mobile-primary-nav.megamenu");
    var signUpElement = !!document.querySelector(".header-button") ? document.querySelector(".header-button") : "";
    var signUpButtonsElement = !!document.querySelector(".utility-nav-buttons") ? document.querySelector(".utility-nav-buttons") : "";
    var searchElement = document.getElementById("search-field");
    var signupNode = signUpElement ? signUpElement.cloneNode(true) : null;
    var searchNode = searchElement ? searchElement.cloneNode(true) : null;
    if (!signupNode && !!signUpButtonsElement) signupNode = signUpButtonsElement.cloneNode(true);
    setUpUtilityNav(megaMenuMobile);
    var headerSearchId = "header-search-mobile"; // start 508 fixes

    searchNode.id = "search-field-mobile";
    searchNode.querySelector("#affiliatename").id = "affiliatename-mobile";
    searchNode.querySelector("label").setAttribute("for", headerSearchId);
    searchNode.querySelector("#header-search").id = headerSearchId;
    searchNode.querySelector("div[aria-label='Site Search']").ariaLabel = "Mobile Site Search"; // end 508 fixes
    // copy nodes to menu

    if (signupNode) {
      var signupNodeLink = signupNode.querySelector("a");
      general_utils.removeClassIfExists(signupNode, "header-button");
      general_utils.addClassIfDoesntExist(signupNode, "utility-nav-buttons");
      general_utils.addClassIfDoesntExist(signupNodeLink, "utility-nav-links");
      general_utils.addClassIfDoesntExist(signupNodeLink, "btn");
      general_utils.addClassIfDoesntExist(signupNodeLink, "tertiary");
      megaMenuMobile.querySelector(".mm-signup").innerHTML = signupNode.outerHTML;
    }

    if (searchNode) megaMenuMobile.querySelector(".mm-search").innerHTML = searchNode.outerHTML; // if (utilityNav) {
    //   const utilNavMarkup = !!brandingBarMenu
    //     ? `${brandingBarMenu.innerHTML} ${utilityNav.innerHTML}`
    //     : utilityNav.innerHTML;
    //   megaMenuMobile.querySelector(".mm-utility-nav").innerHTML = utilNavMarkup;
    // }
    // utilityNav.querySelector("ul").className = "";

    var topNav = document.querySelector(".mm-top-nav");
    var linksContainer = megaMenuMobile.querySelector(".mm-links-container");
    document.getElementById("mm-mobile").addEventListener("click", function (event) {
      if (event.target.classList.contains("mm-mobile-primary-nav")) {
        document.body.classList.toggle("mobile-menu-active");
        document.querySelector(".mm-mobile-primary-nav").style.display = "none";
      }
    });
    document.querySelector(".mobile-megamenu-button").addEventListener("click", function (element) {
      document.body.classList.add("mobile-menu-active");
      mm_mobile_utils.toggleMobileMegaMenu("open");
      var megaMenuMobileDisplay = window.getComputedStyle(megaMenuMobile).getPropertyValue("display");

      if (megaMenuMobileDisplay === "none") {
        megaMenuMobile.style.display = "flex";
      } else {
        megaMenuMobile.style.display = "none";
      }
    });
    document.querySelector(".mm-mobile-menu-close").addEventListener("click", function (element) {
      mm_mobile_utils.toggleMobileMegaMenu("close");
      document.body.classList.remove("mobile-menu-active");
    });
    megaMenuMobile.addEventListener("animationend", function () {
      if (document.querySelector(".nav-container").classList.contains("animation-slide-out")) megaMenuMobile.style.display = "none";
    });
    var firstLevelMenus = document.querySelectorAll(".tb-megamenu-item.level-1");
    firstLevelMenus.forEach(function (element) {
      var decodeHTML = function decodeHTML(html) {
        var txt = document.createElement("textarea");
        txt.innerHTML = html;
        return txt.value;
      };

      var linkText = element.querySelector(".mm-nav-link > div").innerHTML.trim();
      if (linkText.toLowerCase() === "home") return;
      var listItem = document.createElement("li");
      var link = document.createElement("a");
      var subMenu = element.querySelector(".tb-megamenu-item.level-2") ? element.querySelector(".tb-megamenu-item.level-2").cloneNode(true) : "";
      link.text = general_utils.decodeHTMLEntities(linkText);
      link.href = "#mm-mobile-menu-".concat(general_utils.webFriendlyName(linkText));
      link.classList.add("mm-mobile-top-nav");
      link.setAttribute("aria-label", "Jump to " + linkText);

      if (topNav) {
        listItem.appendChild(link);
        topNav.appendChild(listItem);
      }
    });
    var navJumpLinks = document.querySelectorAll(".mm-mobile-top-nav:not(.home)");
    navJumpLinks.forEach(function (link) {
      link.addEventListener("click", function (event) {
        event.preventDefault();
        var navContainer = document.querySelector("#mm-mobile .nav-container");
        var closeButtonHeight = document.querySelector(".mm-mobile-menu-close").getBoundingClientRect().height;
        var position = document.querySelector(event.target.hash).getBoundingClientRect().y;
        var calcluatedPosition = position - closeButtonHeight;
        navContainer.scrollTop = calcluatedPosition;
      });
    });
    document.querySelector(".back-to-top.mm-back-to-top").addEventListener("click", function (event) {
      event.stopPropagation();
      document.getElementById("mm-mobile-header").scrollIntoView();
    });
    document.addEventListener("click", function (event) {
      var clickedInside = document.querySelector("#mm-mobile .nav-container").contains(event.target) ? true : false;

      if (!clickedInside && !event.target.classList.contains("mobile-megamenu-button") && !event.target.classList.contains("mm-back-to-top")) {
        mm_mobile_utils.showBackToTop(false);
        megaMenuMobile.addEventListener("animationend", function () {
          if (document.querySelector(".nav-container").classList.contains("animation-slide-out")) megaMenuMobile.style.display = "none";
        });
      }
    });
    window.addEventListener("popstate", mm_mobile_utils.backToTopShowHide());
  }
};

exports.megamenu_mobile = megamenu_mobile;

function setUpUtilityNav(megaMenuMobile) {
  var utilityNavElement = document.querySelector(".utility-nav");
  var utilityNav = utilityNavElement ? utilityNavElement.cloneNode(true) : null;
  var brandingBarMenu = document.getElementById("nav-branding-bar");
  if (!!brandingBarMenu) brandingBarMenu.querySelector("ul").classList.add("mm-branding-bar-menu");

  if (utilityNav) {
    var utilNavMarkup = !!brandingBarMenu ? "".concat(brandingBarMenu.innerHTML, " ").concat(utilityNav.innerHTML) : utilityNav.innerHTML;
    megaMenuMobile.querySelector(".mm-utility-nav").innerHTML = utilNavMarkup;
  }

  utilityNav.querySelector("ul").className = "";
}

},{"../../_utils/general_utils":14,"./_utils/farmers_mm_mobile_utils":8}],11:[function(require,module,exports){
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.megamenu = void 0;

var mm_utils = _interopRequireWildcard(require("./_utils/farmers_mm_utils"));

var mm_accessibility = _interopRequireWildcard(require("./_utils/accessibility/farmers_mm_accessibility"));

var mm_mobile = _interopRequireWildcard(require("./farmers_mm_mobile.js"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

// Compatible with TB Mega Menu Versions:
// 1.0.0-beta2-rc1 through 1.7.0
var megamenu = function megamenu() {
  if (document.querySelector(".tb-megamenu")) {
    console.log("loading megamenu...");
    mm_utils.simpleClickEvents();
    mm_utils.scrollEvents();
    mm_utils.setupFirstLevelLinks();
    mm_utils.setupSecondLevelLinks();
    mm_utils.setupSideMenuLinks();
    mm_utils.closeOnOutsideClick();
    mm_accessibility.keyboardEventListeners();
    mm_accessibility.ariaCheck();
    document.addEventListener("keydown", function (event) {
      mm_accessibility.handleKeyboard(event);
    });
  }
}; // initiate megamenus


exports.megamenu = megamenu;
megamenu();
mm_mobile.megamenu_mobile();

},{"./_utils/accessibility/farmers_mm_accessibility":5,"./_utils/farmers_mm_utils":9,"./farmers_mm_mobile.js":10}],12:[function(require,module,exports){
"use strict";

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

window.addEventListener('load', function () {
  var helper = function helper(element, className) {
    if (!!element) {
      if (element.classList.contains(className)) {
        return element;
      } else {
        return helper(element.parentElement, className);
      }
    }
  };

  var megamenuButtons = document.querySelectorAll('.accordion-button.nav-link');

  if (megamenuButtons) {
    _toConsumableArray(megamenuButtons).map(function (elm) {
      var submenu = elm.nextElementSibling;
      elm.addEventListener('click', function (evt) {
        evt.preventDefault();
        var elmExpanded = elm.getAttribute('aria-expanded');
        var submenuHidden = submenu.getAttribute('aria-hidden'); //remove existing submenus

        var openSubmenus = document.querySelectorAll('.submenu-item-active');

        _toConsumableArray(openSubmenus).map(function (el) {
          el.classList.remove('submenu-item-active');
        }); // reveal appropriate submenu


        if (elmExpanded == 'false') {
          elm.classList.add('submenu-item-active');
          elm.setAttribute('aria-expanded', 'true');
          submenu.setAttribute('aria-hidden', 'false');
        } else {
          elm.classList.remove('submenu-item-active');
          elm.setAttribute('aria-expanded', 'false');
          submenu.setAttribute('aria-hidden', 'true');
        }
      });
      elm.addEventListener('keyup', function (event) {
        if (event.key == " " || event.key == "Enter") {
          event.preventDefault();
          elm.click();
        }
      });
    });
  }

  var submenuItems = document.querySelectorAll('.nav-submenu > .has-submenu');

  if (submenuItems) {
    _toConsumableArray(submenuItems).map(function (elm) {
      elm.addEventListener('click', function (evt) {
        evt.preventDefault();

        _toConsumableArray(submenuItems).map(function (elm2) {
          elm2.classList.remove('submenu-item-active');
        });

        elm.classList.toggle('submenu-item-active');
      });
    });
  }

  var govBannerButtons = document.querySelectorAll('button.usa-accordion-button.usa-banner-button');

  if (govBannerButtons) {
    _toConsumableArray(govBannerButtons).map(function (item) {
      item.addEventListener('click', function (evt) {
        evt.preventDefault();
        evt.stopPropagation();
        var ariaVal = item.getAttribute('aria-expanded');
        var banner = helper(item.parentElement, 'usa-accordion').querySelector('div[id^="gov-banner"]');
        var newVal = ariaVal == 'true' ? 'false' : 'true';
        var hideContainer = newVal == 'false' ? 'true' : 'false';
        helper(item.parentElement, 'usa-accordion').querySelector('.usa-banner-header').classList.toggle('usa-banner-header-expanded');
        item.setAttribute('aria-expanded', newVal);
        banner.setAttribute('aria-hidden', hideContainer);
      });
    });
  }
});

},{}],13:[function(require,module,exports){
"use strict";

window.addEventListener("load", function () {
  processMobileTables();
});
window.addEventListener("resize", function () {
  processMobileTables();
});

function processMobileTables() {
  var tables = document.querySelectorAll("table");

  if (!!tables) {
    tables.forEach(function (table) {
      var headers = table.querySelectorAll("thead th");
      var dataRows = table.querySelectorAll("tr");
      var headersInData = table.querySelectorAll("tbody th");
      var simpleTable = checkIfSimpleTable(table, headers, dataRows, headersInData);

      if (table.classList.contains("mobile-static-column") && !table.closest(".mobile-static-column-container")) {
        var tableStaticCol = table.cloneNode(true);
        var newDiv = document.createElement("div");
        tableStaticCol.classList.add("show-on-mobile");
        newDiv.classList.add("mobile-static-column-container");
        newDiv.appendChild(tableStaticCol);
        table.after(newDiv);
        table.remove();
        return;
      }

      if (!simpleTable) {
        if (table.classList.contains("mobile-static-column")) return;
        table.classList.add("show-on-mobile");
        table.classList.add("complex-table");
      }

      if (!!simpleTable) setupTableForMobile(table);
      setTimeout(function () {
        if (!table.classList.contains("show-on-mobile")) table.classList.add("show-on-mobile");
      }, 2000);
    });
  }
}

function setupTableForMobile(table) {
  if (table.classList.contains("mobile-static-column")) return;
  table.classList.add("simple-table");
  var rows = table.querySelectorAll("tr");
  var headerData = [];

  if (!!rows) {
    rows.forEach(function (row) {
      var headerCells = row.querySelectorAll("th");
      var tableCells = row.querySelectorAll("td");

      if (!!headerCells.length) {
        headerData = [];
        headerCells.forEach(function (th) {
          headerData.push(th.textContent.trim());
        });
      }

      if (!!tableCells) {
        tableCells.forEach(function (td, idx) {
          td.setAttribute("data-th", headerData[idx]);
        });
      }
    });
  }
}

function checkIfSimpleTable(table, headers, dataRows, headersInData) {
  var integer = 0; // console.log(headersInData);
  // if (headersInData.length) integer++;

  if (!!table && table.classList.contains("ui-datepicker-calendar")) integer++;
  headers.forEach(function (header) {
    if (header.hasAttribute("colspan") || header.hasAttribute("rowspan")) integer++;
  });
  dataRows.forEach(function (row) {
    var dataHeaders = row.querySelectorAll("th");
    var dataCells = row.querySelectorAll("td");
    if (checkForColAndRowSpan(dataHeaders)) integer++;
    if (checkForColAndRowSpan(dataCells)) integer++;
  });
  return integer === 0 ? true : false;
}

function checkForColAndRowSpan(elements) {
  var integer = 0;
  elements.forEach(function (element) {
    if (element.hasAttribute("colspan") || element.hasAttribute("rowspan")) integer++;
  });
  return !!integer ? true : false;
}

},{}],14:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.addClassIfDoesntExist = addClassIfDoesntExist;
exports.convertNodeListToArray = convertNodeListToArray;
exports.decodeHTMLEntities = decodeHTMLEntities;
exports.formatYouTubeUrl = formatYouTubeUrl;
exports.removeClassIfExists = removeClassIfExists;
exports.removeDupsInAssociativeArrayByKey = removeDupsInAssociativeArrayByKey;
exports.removeHtmlComments = removeHtmlComments;
exports.removeUrlParams = removeUrlParams;
exports.sortArrayAlphabeticalByKey = sortArrayAlphabeticalByKey;
exports.webFriendlyName = webFriendlyName;

function removeUrlParams() {
  var newurl = "".concat(window.location.protocol, "//").concat(window.location.host).concat(window.location.pathname);
  window.history.replaceState({}, document.title, newurl);
}

function removeHtmlComments(html) {
  return html.replace(/<!--[\s\S]*?-->/g, "").trim();
}

function convertNodeListToArray(nodeList) {
  return Array.from(nodeList);
}

function webFriendlyName(text) {
  text = text.replace(/\s+/g, "-").toLowerCase();
  text = text.replace(/[^a-z0-9\-]+/gi, "");
  return text;
}

function removeDupsInAssociativeArrayByKey(array, key) {
  var newArray = [];
  var uniqueObject = {};
  var i = 0;

  for (var _i in array) {
    var obj = array[_i][key];
    uniqueObject[obj] = array[_i];
    _i++;
  }

  for (i in uniqueObject) {
    if (i !== "undefined") newArray.push(uniqueObject[i]);
  }

  return newArray;
}

function sortArrayAlphabeticalByKey(array, key) {
  if (!key) key = "text";
  array.sort(function (a, b) {
    if (a[key] > b[key]) return 1;
    if (a[key] < b[key]) return -1;
    return 0;
  });
}

function decodeHTMLEntities(html) {
  var txt = document.createElement("textarea");
  txt.innerHTML = html;
  return txt.value;
}

function addClassIfDoesntExist(element, className) {
  if (!element.classList.contains(className)) element.classList.add(className);
}

function removeClassIfExists(element, className) {
  if (element.classList.contains(className)) element.classList.remove(className);
}

function formatYouTubeUrl(url) {
  var videoCode;
  var youTubeUrl = "https://www.youtube.com/watch?v=";

  if (url.indexOf("embed") !== -1) {
    var array = url.split("embed/");

    var _videoCode = !!array[1] ? array[1].split("?")[0] : "";

    if (!!_videoCode) url = "".concat(youTubeUrl).concat(_videoCode);
  }

  return url;
}

},{}],15:[function(require,module,exports){
"use strict";

exports.languages = [{
  lang: "en",
  en_text: "English",
  i18n_text: "English"
}, {
  lang: "es",
  en_text: "Spanish",
  i18n_text: "Español"
}];

},{}],16:[function(require,module,exports){
"use strict";

require("./Components/accordion");

require("./Components/menu");

require("./Components/mobile_tables");

require("./Components/megamenu/tb-mega-menu-custom.1.0.0");

require("./Components/forms/_forms");

window.is_iPad = navigator.userAgent.match(/iPad/i) != null;
window.is_mobile_device = false; //initialize as false
// device detection

if (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|ipad|iris|kindle|Android|Silk|lge |maemo|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i.test(navigator.userAgent) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(navigator.userAgent.substr(0, 4))) {
  window.is_mobile_device = true;
}

},{"./Components/accordion":1,"./Components/forms/_forms":3,"./Components/megamenu/tb-mega-menu-custom.1.0.0":11,"./Components/menu":12,"./Components/mobile_tables":13}]},{},[16]);
